    %заголовок первого клауза предиката,
    %который сопоставляет любой список с хотя бы одним элементом.
    %Список разделен на его голову H и хвост T.
longest_element_position([H|T], Pos, Len) :-
    %рекурсивный вызов находит позицию и длину наиболее длинного элемента в хвосте списка.
    longest_element_position(T, Pos1, Len1),
    %вызов предсказания вычисляет длину головы списка.
    length(H, LenH),
    %проверяем, превышает ли длина головы длину наиболее
    %длинного элемента в хвосте. Если это так, то позиция наиболее длинного
    %элемента устанавливается в 1, а его длина устанавливается в LenH.
    %В противном случае позиция вычисляется как Pos1 + 1 и длина устанавливается в Len1.
    (LenH > Len1 -> Pos = 1, Len = LenH; Pos is Pos1 + 1, Len = Len1).
    %Это заголовок второго клауза предиката
longest_element_position([H|_], 1, Len) :- length(H, Len).
longest_element_position([], _, _) :- fail. % Добавляем базовый случай для пустого списка.

% longest_element_position([[1, 2], [a, b, c], [true, false, true, false]], Pos, Len).
